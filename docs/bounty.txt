### Key ###
[ ]: Currently open
[?]: Implemented, but not (fully) tested
[/]: Implemented, being tested
[x]: Completed
[~]: Note/Feature

### 02/27/2022 ###
[~] some things to think about for sockets:
  |=> SO_REUSEADDR needs to be enabled for rapid testing (and practical use)
    |=> Should be implemented in np::port()
  |=> some of the other SocketOptions are also interesting, and more time should be spent exploring

[x] terminate crash:
  rnet crashes sometimes, mostly on terminate called w/o active exception
  |=> This means that one/some of the threads are going out of scope (e.g. living beyond program)
  |=> This is most likely due to the new changes w/ Relay::Foward(), which itself is incomplete
    |=> As a side note/possible solution, std::jthread might be a more applicable implementation (.join is called within its destructor)
    |=> Another possible solution is doing a similar wrapper to Relay::_Lazy() or Timeout();
  |=> Almost all threads are changed to jthreads
    |=> The one hold out is in Peer::Close

[x] Embedded Logic in Peer
  Peer::Peer() takes a std::function variable that exists as its 'embedded' logic (scope may change based on function content).
  Right now, it doesn't actually do anything (it never gets called)
  |=> This is, of course, a massive TODO, considering the Peer itself is detached from the lib calls.
  |=> Gotten to a point where it's just freezing on thread call
  |=> Implemented Peer::Swap(std::function...), and Peer::_Wake(), enabling embeded logic and logic swaping
